cat << l < file			OK
<< l < file 			KO leaves fd open -> pb when in file on non forked cmd
<< l > file1 > file2	OK
| | | |					OK
var="< file cat"		KO exec first cmd or redir (if echo $var ; res= < file cat)
var+=bonjour			KO concat not working (works only if  export before each cmd);
var=toi=moi				OK
cat | cat > file		OK (writes output of second cat into file)
cmd < file < file1		OK
var=salut ; echo $var	OK
echo -nnnnn ; echo -n-n-n-n-n; echo -nnaaaa ; echo -n -n -n -n -n -n OK
cd double args			?
export					OK
echo "<3" >> "<3" 		OK
cd ../../../../../		OK
cat < a > b				OK
cd /					OK
cd -					OK
cat < "file"			OK
cat | cat | ls			KO
$var="ec" ; $var"ho" a	OK
cat > f1 | cat > f2 | ls OK
unset arg1 arg2			OK
cd $PWD hi				NEARLY OK (missing \n after error message)
echo < Makefile bonjour OK
$EMPTY (must reset exit code)
$EMPTY echo hi			KO (reads empy str as cmd);
export var ; env | grep var ; export | grep var 			OK (has to exist with export but not env)
unset HOME ; cd ~ 		KO (~ is not a relative or absolute path)
export HELLO=123 A- WORLD=456 OK (check exit code, export both values but prints error msg and sets $? to 1)
echo txt > $var			OK
export $ARG				OK
ctl + D in heredoc		OK
export var="echo world" ; $var KO (doesnt exec echo)
export var= "      world" ; echo $var OK
<< "<<" cat				OK
echo bonsoir > file | cat < file OK
ls > f | ls > f1 		OK
ls | ls | ls | ls | ls | ls | ls | ls OK
export var=salut > file	OK
var = "echo this" ; var1 = "c'est" ; var2 = 'c"est' ; $var $var $var KO
ex"it" (has to exit and print exit); OK
exit | exit				OK
exit | ls				OK
exit 178036478945602741 (some big overflow nbr) OK
echo a > out1| <<out2 >| cat MOUAIS OK (gere pas le >| sans espace)
echo a > out1| <<out2> | cat OK
"'ec'ho" salut			OK
echo salut "" les "" ami OK
grep echo < tests.txt > file2 OK
cat | cat | ls			OK
cat | cat |				OK
github ; Lucas Kuhn minishell tester
> file					OK
<>						KO
echo a > file1 <<		KO (parse error still there)
< grep a somefile		OK
cat > file1  < infile1  >> file2 <infile2 OK
echo a > file1 | grep a OK
grep a					MOUAIS OK (enter doesnt work with grep??)
./minishell				OK
cat << $HOME			OK
<< "stop" cat -> dont expand values in the heredoc	OK
<< stop cat -> expand values in the heredoc			OK
echo a | pwd > file1	OK
cat << "st""op"			OK
cat << "st"op			OK
cat |< file1			KO (enter dosent work because enter key doesnt work in pipe)
cat | < file1			KO	same as above
/bin/ls					OK
../some_exec			OK
> existing_file			OK
> non_existing_file		OK
""<<123					KO
..						KO (execve error, bash does command not found)
